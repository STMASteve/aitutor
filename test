<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>STMA AI Learning Coach</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(-45deg, #e0eafc, #cfdef3, #e7eff9, #d6e2ef);
            background-size: 400% 400%;
            animation: gradientBG 15s ease infinite;
        }

        @keyframes gradientBG {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        @keyframes fadeInSlideUp {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .chat-message {
            animation: fadeInSlideUp 0.5s ease-out forwards;
        }

        .chat-bubble {
            max-width: 80%;
            word-wrap: break-word;
        }
        .chat-bubble-user {
            background-color: #fbbF24; /* STMA Gold */
            color: #002D62; /* STMA Blue */
        }
        .chat-bubble-ai {
            background-color: #F3F4F6;
            color: #1F2937;
        }
        .suggestion-chip {
            cursor: pointer;
            transition: all 0.3s;
        }
        .suggestion-chip:hover {
            background-color: #D1D5DB;
            transform: translateY(-2px);
        }
        .quiz-option {
            cursor: pointer;
            border: 2px solid #D1D5DB;
            transition: all 0.2s;
        }
        .quiz-option:hover {
            background-color: #F9FAFB;
            border-color: #4B5563;
        }
        .quiz-option.correct {
            background-color: #D1FAE5;
            border-color: #10B981;
            color: #065F46;
        }
        .quiz-option.incorrect {
            background-color: #FEE2E2;
            border-color: #EF4444;
            color: #991B1B;
        }
        .quiz-option.disabled {
            cursor: not-allowed;
            opacity: 0.7;
        }

        /* Improved Typing Indicator */
        .typing-indicator span {
            height: 8px;
            width: 8px;
            float: left;
            margin: 0 1px;
            background-color: #9E9E9E;
            display: block;
            border-radius: 50%;
            opacity: 0.4;
            animation: typingAnimation 1s infinite;
        }
        .typing-indicator span:nth-of-type(2) {
            animation-delay: 0.2s;
        }
        .typing-indicator span:nth-of-type(3) {
            animation-delay: 0.4s;
        }
        @keyframes typingAnimation {
            0% { opacity: 0.4; }
            20% { opacity: 1; }
            80% { opacity: 0.4; }
            100% { opacity: 0.4; }
        }
        .generated-image-container {
            border-radius: 0.75rem;
            overflow: hidden;
            border: 1px solid #e5e7eb;
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">
    <div class="w-full max-w-2xl h-[95vh] sm:max-h-[700px] bg-white rounded-2xl shadow-2xl flex flex-col overflow-hidden">
        <!-- Header -->
        <header class="bg-[#002D62] text-white p-4 flex items-center justify-between shadow-lg z-10">
            <h1 class="text-xl sm:text-2xl font-bold">STMA AI Learning Coach</h1>
            <div class="w-12 h-12 bg-white rounded-lg flex items-center justify-center p-1 shadow-md">
                <img src="https://pictures.ce.eleyo.com/23/large/15169991549777596.png" alt="STMA Logo" class="object-contain h-full w-full">
            </div>
        </header>

        <!-- Chat Area -->
        <div id="chat-area" class="flex-1 p-6 overflow-y-auto bg-gray-50">
            <!-- Initial Greeting -->
            <div class="flex justify-start mb-4 chat-message">
                <div class="chat-bubble chat-bubble-ai p-4 rounded-lg shadow">
                    <p class="font-medium">Hello! I'm your STMA AI Learning Coach. üëã</p>
                    <p>I'm here to help you think through problems and find the answers yourself. What are we working on today?</p>
                </div>
            </div>
        </div>
        
        <!-- Suggestion Chips -->
        <div id="suggestion-chips" class="p-3 border-t border-gray-200 flex flex-wrap gap-2 justify-center bg-white">
             <div class="suggestion-chip bg-gray-200 text-gray-800 text-sm font-medium px-4 py-2 rounded-full shadow-sm" onclick="askSuggestion('Help me with a math problem.')">üìê Help with math</div>
             <div class="suggestion-chip bg-gray-200 text-gray-800 text-sm font-medium px-4 py-2 rounded-full shadow-sm" onclick="askSuggestion('I have to write a paragraph about a book.')">üìö Write a paragraph</div>
             <div class="suggestion-chip bg-gray-200 text-gray-800 text-sm font-medium px-4 py-2 rounded-full shadow-sm" onclick="askSuggestion('What was the main cause of the American Revolution?')">üá∫üá∏ American Revolution</div>
        </div>

        <!-- Input Area -->
        <div class="p-4 bg-white border-t border-gray-200">
            <div class="flex items-center space-x-2">
                 <button id="image-btn" class="bg-gray-200 text-gray-700 font-bold rounded-full p-3 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 transition-all duration-300 transform hover:scale-110 shadow-sm" title="Illustrate a concept">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-image"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle cx="8.5" cy="8.5" r="1.5"></circle><polyline points="21 15 16 10 5 21"></polyline></svg>
                </button>
                <button id="quiz-btn" class="bg-[#fbbF24] text-[#002D62] font-bold rounded-full p-3 hover:bg-yellow-400 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 transition-all duration-300 transform hover:scale-110 shadow-sm" title="Create a Practice Quiz">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><line x1="12" y1="17" x2="12.01" y2="17"></line></svg>
                </button>
                <input type="text" id="user-input" class="flex-1 border-gray-300 rounded-full py-3 px-5 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-shadow duration-300 shadow-sm" placeholder="Ask your Learning Coach...">
                <button id="send-btn" class="bg-[#002D62] text-white rounded-full p-3 hover:bg-blue-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all duration-300 transform hover:scale-110 shadow-sm">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M12 5l7 7-7 7" />
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <script>
        const chatArea = document.getElementById('chat-area');
        const userInput = document.getElementById('user-input');
        const sendBtn = document.getElementById('send-btn');
        const quizBtn = document.getElementById('quiz-btn');
        const imageBtn = document.getElementById('image-btn');
        const suggestionChipsContainer = document.getElementById('suggestion-chips');

        let chatHistory = [];

        // --- Event Listeners ---
        sendBtn.addEventListener('click', handleUserMessage);
        userInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault(); 
                handleUserMessage();
            }
        });
        quizBtn.addEventListener('click', handleQuizRequest);
        imageBtn.addEventListener('click', handleImageRequest);


        function askSuggestion(question) {
            userInput.value = question;
            handleUserMessage();
        }

        // --- Main message handlers ---
        function handleUserMessage() {
            const message = userInput.value.trim();
            if (!message) return;

            addMessageToChat('user', message);
            chatHistory.push({ role: 'user', parts: [{ text: message }] });
            userInput.value = '';
            suggestionChipsContainer.style.display = 'none'; // Hide suggestions
            showLoadingIndicator();
            getAITutorResponse();
        }

        function handleQuizRequest() {
            if (chatHistory.length < 2) {
                addMessageToChat('ai', "Let's chat a little more about a topic first, then I can make a great quiz for you!");
                return;
            }
            const message = "‚ú® Can you make me a practice quiz based on our conversation?";
            addMessageToChat('user', message);
            chatHistory.push({ role: 'user', parts: [{ text: message }] });
            showLoadingIndicator();
            generateQuiz();
        }

        function handleImageRequest() {
            if (chatHistory.length < 1) {
                addMessageToChat('ai', "Let's talk about something first, then I can create an illustration for you!");
                return;
            }
            const message = "üé® Can you illustrate the main topic of our conversation?";
            addMessageToChat('user', message);
            chatHistory.push({ role: 'user', parts: [{ text: message }] });
            showLoadingIndicator();
            generateImage();
        }
        
        // --- Chat UI Functions ---
        function addMessageToChat(sender, message) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('chat-message');

            const bubbleDiv = document.createElement('div');
            bubbleDiv.classList.add('chat-bubble', 'p-4', 'rounded-lg', 'shadow');

            if (sender === 'user') {
                messageDiv.classList.add('flex', 'justify-end', 'mb-4');
                bubbleDiv.classList.add('chat-bubble-user', 'font-medium');
            } else {
                messageDiv.classList.add('flex', 'justify-start', 'mb-4');
                bubbleDiv.classList.add('chat-bubble-ai');
            }
            
            // Sanitize and format message
            const formattedMessage = message
                .replace(/</g, "&lt;").replace(/>/g, "&gt;") // Sanitize HTML tags
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Bold
                .replace(/\n/g, '<br>'); // Newlines
                
            bubbleDiv.innerHTML = `<p>${formattedMessage}</p>`;
            messageDiv.appendChild(bubbleDiv);
            chatArea.appendChild(messageDiv);
            chatArea.scrollTop = chatArea.scrollHeight;
        }

        function addImageToChat(imageUrl, caption) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('chat-message', 'flex', 'justify-start', 'mb-4');

            const bubbleDiv = document.createElement('div');
            bubbleDiv.classList.add('chat-bubble', 'p-4', 'rounded-lg', 'shadow', 'chat-bubble-ai', 'w-full');
            
            bubbleDiv.innerHTML = `
                <p class="font-semibold mb-2">${caption}</p>
                <div class="generated-image-container">
                    <img src="${imageUrl}" alt="${caption}" class="w-full h-auto object-cover" />
                </div>
            `;
            
            messageDiv.appendChild(bubbleDiv);
            chatArea.appendChild(messageDiv);
            chatArea.scrollTop = chatArea.scrollHeight;
        }


        function showLoadingIndicator() {
            const loadingDiv = document.createElement('div');
            loadingDiv.id = 'loading-indicator';
            loadingDiv.classList.add('flex', 'justify-start', 'mb-4', 'chat-message');
            loadingDiv.innerHTML = `
                <div class="chat-bubble chat-bubble-ai p-4 rounded-lg shadow flex items-center">
                    <div class="typing-indicator">
                        <span></span><span></span><span></span>
                    </div>
                </div>
            `;
            chatArea.appendChild(loadingDiv);
            chatArea.scrollTop = chatArea.scrollHeight;
        }

        function removeLoadingIndicator() {
            const loadingIndicator = document.getElementById('loading-indicator');
            if (loadingIndicator) {
                loadingIndicator.remove();
            }
        }
        
        function displaySuggestions(suggestions) {
            suggestionChipsContainer.innerHTML = '';
            suggestions.forEach(suggestion => {
                const chip = document.createElement('div');
                chip.classList.add('suggestion-chip', 'bg-gray-200', 'text-gray-800', 'text-sm', 'font-medium', 'px-4', 'py-2', 'rounded-full', 'shadow-sm');
                chip.textContent = suggestion;
                chip.onclick = () => askSuggestion(suggestion);
                suggestionChipsContainer.appendChild(chip);
            });
            suggestionChipsContainer.style.display = 'flex';
        }

        function addQuizToChat(quizData) {
            const quizContainer = document.createElement('div');
            quizContainer.classList.add('flex', 'justify-start', 'mb-4', 'chat-message');

            let quizHtml = '<div class="chat-bubble chat-bubble-ai p-5 rounded-lg w-full space-y-4 shadow">';
            quizHtml += '<h3 class="font-bold text-lg text-gray-900">‚ú® Practice Quiz!</h3>';

            quizData.forEach((item, index) => {
                quizHtml += `<div class="quiz-item" id="quiz-item-${index}">`;
                quizHtml += `<p class="font-semibold mb-2 text-gray-800">${index + 1}. ${item.question}</p>`;
                quizHtml += '<div class="space-y-2">';
                item.options.forEach((option) => {
                    const escapedOption = option.replace(/'/g, "\\'");
                    const escapedAnswer = item.answer.replace(/'/g, "\\'");
                    quizHtml += `<div class="quiz-option p-3 rounded-lg text-gray-700 font-medium" onclick="checkAnswer(${index}, '${escapedOption}', '${escapedAnswer}')">${option}</div>`;
                });
                quizHtml += '</div></div>';
            });
            quizHtml += '</div>';
            quizContainer.innerHTML = quizHtml;
            chatArea.appendChild(quizContainer);
            chatArea.scrollTop = chatArea.scrollHeight;
        }

        function checkAnswer(questionIndex, selectedOption, correctAnswer) {
            const quizItem = document.getElementById(`quiz-item-${questionIndex}`);
            const options = quizItem.querySelectorAll('.quiz-option');

            options.forEach(option => {
                option.classList.add('disabled');
                option.onclick = null; 

                const optionText = option.textContent;
                if (optionText === correctAnswer) {
                    option.classList.add('correct');
                } else if (optionText === selectedOption) {
                    option.classList.add('incorrect');
                }
            });
        }

        // --- Gemini API Integration ---
        async function getAITutorResponse() {
            const apiKey = ""; // Leave empty
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=${apiKey}`;

            const systemPrompt = `You are the 'STMA AI Learning Coach', a Socratic guide for K-12 students from the St. Michael-Albertville school district. Your main goal is to help students find answers themselves, not to provide them directly. You must analyze the entire conversation history to understand the student's progress and adapt your questions.

            **Core Rules:**
            1.  **Never give the direct answer.** Ask guiding questions to help the student break down the problem.
            2.  **Analyze History for Scaffolding:** If the history shows the student is repeatedly confused or answering incorrectly, simplify your approach.
            3.  **Analyze History for Challenge:** If the history shows the student is grasping concepts quickly, push them further.
            4.  **Be encouraging:** Use a friendly, positive tone.
            5.  **Follow-up Questions:** After your response, ALWAYS provide exactly three short, guiding follow-up questions to keep the conversation going. Format them as a simple JavaScript array of strings at the very end of your response, like this: ["Question 1?", "Question 2?", "Question 3?"]. Do not add any other text before or after this array.
            6.  **Image Requests:** If the user asks for an illustration, keep your text response brief and focused on creating a good image prompt. For example: "Great idea! Let's visualize that. What are the most important things to include in a picture of the water cycle?".`;

            const payload = {
                contents: [
                    { role: 'user', parts: [{ text: `System instruction: ${systemPrompt}` }] },
                    { role: 'model', parts: [{ text: "Understood. I am the STMA AI Learning Coach." }] },
                    ...chatHistory
                ],
            };

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) throw new Error(`API Error: ${response.status}`);
                const result = await response.json();
                removeLoadingIndicator();
                
                const candidate = result.candidates?.[0];
                if (!candidate?.content?.parts?.[0]?.text) throw new Error("Invalid response structure from API.");
                
                let fullText = candidate.content.parts[0].text;
                chatHistory.push({ role: 'model', parts: [{ text: fullText }] });
                
                let mainResponse = fullText;
                let suggestions = [];
                const suggestionRegex = /\["([^"]+)",\s*"([^"]+)",\s*"([^"]+)"\]\s*$/;
                const match = fullText.match(suggestionRegex);

                if (match) {
                    mainResponse = fullText.substring(0, match.index).trim();
                    suggestions = [match[1], match[2], match[3]];
                }
                
                addMessageToChat('ai', mainResponse);
                if (suggestions.length > 0) {
                    displaySuggestions(suggestions);
                }
            } catch (error) {
                console.error("Error fetching AI response:", error);
                removeLoadingIndicator();
                addMessageToChat('ai', "I'm having a little trouble connecting right now. Please try again.");
            }
        }

        async function generateQuiz() {
            const apiKey = ""; // Leave empty
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=${apiKey}`;

            const quizPrompt = `Based on the conversation history, create a 3-question multiple-choice quiz for a K-12 student. The answer must be one of the options.`;
            let historyText = chatHistory.map(entry => `${entry.role === 'user' ? 'Student' : 'Coach'}: ${entry.parts[0].text}`).join('\n');

            const payload = {
                contents: [{ parts: [{ text: `${quizPrompt}\n\nConversation:\n${historyText}` }] }],
                generationConfig: {
                    responseMimeType: "application/json",
                    responseSchema: { type: "OBJECT", properties: { "quiz": { type: "ARRAY", items: { type: "OBJECT", properties: { "question": { "type": "STRING" }, "options": { type: "ARRAY", items: { "type": "STRING" } }, "answer": { "type": "STRING" } }, required: ["question", "options", "answer"] } } }, required: ["quiz"] }
                }
            };
            
            try {
                const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                if (!response.ok) throw new Error(`API Error: ${response.status}`);
                const result = await response.json();
                removeLoadingIndicator();

                const candidate = result.candidates?.[0];
                if (!candidate?.content?.parts?.[0]?.text) throw new Error("Invalid JSON response for quiz.");

                const jsonText = candidate.content.parts[0].text;
                const parsedJson = JSON.parse(jsonText);
                
                if (parsedJson.quiz?.length > 0) {
                    chatHistory.push({ role: 'model', parts: [{ text: `I generated a quiz: ${jsonText}` }] });
                    addQuizToChat(parsedJson.quiz);
                } else {
                    addMessageToChat('ai', "I couldn't come up with a quiz right now. Let's talk more first!");
                }
            } catch (error) {
                console.error("Error generating quiz:", error);
                removeLoadingIndicator();
                addMessageToChat('ai', "I had trouble creating a quiz. Let's try again in a moment.");
            }
        }

        async function generateImage() {
            const apiKey = ""; // Leave empty
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;
            
            // Create a concise prompt for the image model from the last few user/ai interactions
            const imagePromptBuilder = `Summarize the following conversation into a short, descriptive prompt for an image generation AI. The prompt should be a simple, clean, educational illustration suitable for a K-12 student. For example: "A simple diagram of the water cycle with labels for evaporation, condensation, and precipitation." or "A cartoon brain with lightbulbs showing new ideas."`;
            let historySlice = chatHistory.slice(-4).map(entry => `${entry.role}: ${entry.parts[0].text}`).join('\n');
            
            // First, ask a text model to create a good prompt.
            let imagePrompt = "A helpful illustration for a student."; // fallback
            try {
                const promptGenResponse = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=${apiKey}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ contents: [{ parts: [{ text: `${imagePromptBuilder}\n\nConversation:\n${historySlice}` }] }] })
                });
                if (promptGenResponse.ok) {
                    const promptResult = await promptGenResponse.json();
                    imagePrompt = promptResult.candidates?.[0]?.content?.parts?.[0]?.text.trim() || imagePrompt;
                }
            } catch (e) {
                console.error("Could not generate a better image prompt, using fallback.", e);
            }
            
            const payload = {
                instances: [{ "prompt": imagePrompt }],
                parameters: { "sampleCount": 1 }
            };

            try {
                const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                if (!response.ok) throw new Error(`Image API Error: ${response.status}`);
                
                const result = await response.json();
                removeLoadingIndicator();

                if (result.predictions?.[0]?.bytesBase64Encoded) {
                    const imageUrl = `data:image/png;base64,${result.predictions[0].bytesBase64Encoded}`;
                    const caption = `Here's an illustration for: "${imagePrompt}"`;
                    chatHistory.push({ role: 'model', parts: [{ text: `I generated an image with the prompt: ${imagePrompt}` }] });
                    addImageToChat(imageUrl, caption);
                } else {
                    throw new Error("Invalid image data in response.");
                }
            } catch (error) {
                console.error("Error generating image:", error);
                removeLoadingIndicator();
                addMessageToChat('ai', "Sorry, I wasn't able to create an image at this time. Please try again.");
            }
        }
    </script>
</body>
</html>

